@page "/"

@using ChallengePad.Channel
@using ChallengePad.Models
@using ChallengePad.Database
@using ChallengePad.ViewModels
@using System.Threading
@using System.Globalization
@using System.Diagnostics;
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.Extensions.Options
@inject IServiceScopeFactory ScopeFactory
@inject IOptions<ChallengePadSettings> Settings
@inject SubscriptionManager SubManager
@implements IDisposable

@if (CreateOperation != null)
{
    <div class="modal" tabindex="-1" role="dialog" style="display: block">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create Operation</h5>
                    <button type="button" class="close" @onclick="@(() => CreateOperation = null)" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <input class="form-control" type="text" placeholder="ENOWARS" @bind="@CreateOperation.Name" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => CreateOperation = null)">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="@(() => HandleCreateOperation(CreateOperation))">Create</button>
                </div>
            </div>
        </div>
    </div>
}

<button class="nav-item m-2" @onclick="@(() => CreateOperation = new CreateOperationModal())">Add Operation</button>

@foreach (var operation in Operations)
{
    <a href="/o/@operation.Name">@operation.Name</a>
}

@code {
    bool ShowHidden = false;
    Operation[] Operations = new Operation[0];
    Operation? SelectedOperation = null;
    Objective? SelectedObjective = null;
    List<UploadedFile>? SelectedFileList = null;
    string? Files = null;
    CreateOperationModal? CreateOperation = null;
    CancellationTokenSource CancelSource = new CancellationTokenSource();

    public void Dispose()
    {
        CancelSource.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        using var scope = ScopeFactory.CreateScope();
        var db = scope.ServiceProvider.GetRequiredService<IChallengePadDb>();
        Operations = await db.GetOperations(0, 100, CancelSource.Token);
        var subTask = SubManager.Subscribe(CancelSource.Token, (id) =>
        {
            var updateTask = ScheduleUpdate();
        });
    }

    void HandleCreateOperation(CreateOperationModal modal)
    {
        if (modal.Name != null && modal.Name != "")
        {
            CreateOperation = null;
            Task.Run(async () =>
            {
                using var scope = ScopeFactory.CreateScope();
                var db = scope.ServiceProvider.GetRequiredService<IChallengePadDb>();
                await db.CreateOperation(modal.Name, CancelSource.Token);
            });
        }
    }

    async Task ScheduleUpdate()
    {
        using var scope = ScopeFactory.CreateScope();
        var db = scope.ServiceProvider.GetRequiredService<IChallengePadDb>();
        var operations = await db.GetOperations(0, 100, CancellationToken.None);
        Update(operations);
    }

    void Update(Operation[] operations)
    {
        Operations = operations;
        base.StateHasChanged();
    }

    async Task ToggleObjectiveVisibility(Objective obj)
    {
        using var scope = ScopeFactory.CreateScope();
        obj.Visible = !obj.Visible;
        var db = scope.ServiceProvider.GetRequiredService<IChallengePadDb>();
        await db.UpdateObjectiveVisiblity(obj.Id, obj.OperationId, obj.Visible, CancelSource.Token);
    }

    void ToggleHidden()
    {
        ShowHidden = !ShowHidden;
    }
}
