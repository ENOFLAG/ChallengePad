@page "/o/{OperationName}"
@page "/o/{OperationName}/{ObjectiveName}"
@page "/o/{OperationName}/{ObjectiveName}/{ActionName}"

@using System.Threading
@using System.Globalization
@using System.Diagnostics;
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.Extensions.Logging
@using Microsoft.Extensions.Options
@using ChallengePad.Channel
@using ChallengePad.Models
@using ChallengePad.Database
@using ChallengePad.ViewModels

@inject IServiceScopeFactory ScopeFactory
@inject IOptions<ChallengePadSettings> Settings
@inject SubscriptionManager SubManager
@inject ILogger<OperationPage> Logger
@inject NavigationManager NavigationManager
@implements IDisposable

@if (CreateObjective != null)
{
    <div class="modal" tabindex="-1" role="dialog" style="display: block">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create Objective</h5>
                    <button type="button" class="close" @onclick="@(() => CreateObjective = null)" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <input class="form-control" type="text" placeholder="ScavengePad" @bind="@CreateObjective.Name" />
                    <input class="form-control" type="text" placeholder="web" @bind="@CreateObjective.Category" />
                    <input class="form-control" type="number" placeholder="10" @bind="@CreateObjective.Points" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => CreateObjective = null)">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="@(() => HandleCreateObjective(CreateObjective))">Create</button>
                </div>
            </div>
        </div>
    </div>
}

@if (SelectedOperation != null)
{
    <div id="card">
        <div class="card p-2">
            <div class="highlightable">
                <a href="/o/@SelectedOperation.Name">@SelectedOperation.Name</a>
            </div>
            <div class="progress m-2">
                <div class="progress-bar" role="progressbar" style="width: @((SelectedOperation.SolvedObjectives(ShowHidden)*100.0/SelectedOperation.TotalObjectives(ShowHidden)).ToString(CultureInfo.InvariantCulture))%">@SelectedOperation.SolvedObjectives(ShowHidden) / @SelectedOperation.TotalObjectives(ShowHidden)</div>
            </div>
            <div class="progress m-2">
                <div class="progress-bar" role="progressbar" style="width: @((SelectedOperation.SolvedPoints(ShowHidden)*100.0/SelectedOperation.TotalPoints(ShowHidden)).ToString(CultureInfo.InvariantCulture))%">@SelectedOperation.SolvedPoints(ShowHidden) / @SelectedOperation.TotalPoints(ShowHidden)</div>
            </div>
        </div>

        <div class="card mt-4 p-2">
            <table class="objective-table">
                @foreach (var category in SelectedOperation.Categories)
                {
                    @if (category.Objectives.Where(obj => obj.Visible || ShowHidden).Count() > 0)   // Category not empty due to filter
                    {
                        <tr>
                            <td colspan="5"><strong>@category.Name [<span class="done-count">@category.SolvedObjectives(ShowHidden)</span>/@category.TotalObjectives(ShowHidden)]</strong></td>
                        </tr>
                        @foreach (var objective in category.Objectives.Where(obj => obj.Visible || ShowHidden))
                        {
                            <tr @key="@("objrow" + objective?.Id)" class="objective done highlightable">
                                <td class="padded">
                                    <input @key="@("box" + objective?.Id)" type="checkbox" checked="@objective?.Solved" @onchange=@(async eventArgs => { objective.Solved = (bool)eventArgs.Value; await HandleObjectiveSolvedChanged(objective); }) />
                                </td>
                                <td class="padded" width="100%">
                                    <a href="/o/@SelectedOperation.Name/@objective.Name" @key="@("link" + objective?.Id)" class="contentlink">[@objective?.Points] @objective?.Name</a>
                                </td>
                                <td class="padded" nowrap>
                                    <a @key="@("hide" + objective.Id)" class="contentlink" @onclick="@(async () => await ToggleObjectiveVisibility(objective))"><i class="@(objective.Visible ? "fa fa-eye-slash" : "fa fa-eye")"></i></a>
                                </td>
                                <td class="padded" nowrap>
                                    <a href="/o/@SelectedOperation.Name/@objective.Name/files" @key="@("files" + objective.Id)" class="contentlink"><i class="fa fa-folder"></i></a>
                                    <sup>@objective.Files.Count</sup>
                                </td>
                            </tr>
                        }
                    }
                }
            </table>
            <div class="custom-btn-container">
                <button type="button" class="btn btn-outline-primary" @onclick="@(async () => CreateObjective = new CreateObjectiveModal(SelectedOperation.Id))">Add</button>
                <button type="button" class="btn btn-outline-secondary" @onclick="@(() => ToggleHidden())">@(ShowHidden ? "Hide Elements" : "Show Hidden")</button>
            </div>
        </div>
    </div>
    <div id="content">
        @if (SelectedObjective != null && SelectedFileList == null)
        {
            <iframe class="card" style="width:100%; height:100%; border:0; border-style:solid;" src="@(Settings.Value.PadPrefix + "PAD_OBJECTIVE" + SelectedObjective.Id + Settings.Value.PadSuffix)" />
        }
        else if (SelectedFileList == null)
        {
            <iframe class="card" style="width:100%; height:100%; border:0; border-style:solid;" src="@(Settings.Value.PadPrefix + "PAD_OPERATION" + SelectedOperation.Id + Settings.Value.PadSuffix)" />
        }
        else
        {
            <table class="table table-striped">
                <tbody>
                    <tr>
                        <th>Name</th>
                        <th>Author</th>
                        <th>Uploaded</th>
                    </tr>
                    @foreach (var file in SelectedFileList)
                    {
                        <tr @key="@("filelistitem" + file.Id)">
                            <td><a href="/api/files?id=@(file.Id)" download target="_blank">@(file.Filename)</a></td>
                            <td>@file.Username</td>
                            <td><abbr class="timeago" title="uploaded">@file.Timestamp</abbr></td>
                        </tr>
                    }
                </tbody>
            </table>
            <iframe name="hidden-iframe" style="display: none;"></iframe>
            <form id="formId" action="/api/files" enctype="multipart/form-data" method="post" target="hidden-iframe">
                @if (SelectedObjective != null)
                {
                    <input type="hidden" name="id" @bind="@SelectedObjective.Id" />
                    <input type="hidden" name="isObjectiveFile" value="true" />
                }
                else
                {
                    <input type="hidden" name="id" @bind="@SelectedOperation.Id" />
                    <input type="hidden" name="isObjectiveFile" value="false" />
                }
                <input type="file" name="files" multiple="multiple" @bind="@Files"><br>
                <input type="submit" value="Upload" @onclick="foo => { Files = null; }">
            </form>
        }
    </div>
}

@code {
    CancellationTokenSource CancelSource = new CancellationTokenSource();
    [Parameter]
    public string? OperationName { get; set; }
    [Parameter]
    public string? ObjectiveName { get; set; }
    [Parameter]
    public string? ActionName { get; set; }

    bool ShowHidden = false;
    CreateObjectiveModal? CreateObjective = null;
    Operation? SelectedOperation = null;
    Objective? SelectedObjective = null;
    List<UploadedFile>? SelectedFileList = null;
    string? Files = null;

    protected override void OnInitialized()
    {
        Logger.LogWarning("OnInitialized");
        var subTask = SubManager.Subscribe(CancelSource.Token, (id) =>
        {
            if (id == SelectedOperation?.Id)
            {
                ScheduleUpdate();
            }
        });
    }

    public void Dispose()
    {
        CancelSource.Cancel();
    }

    protected override void OnParametersSet()
    {
        Logger.LogWarning($"OnParametersSet {OperationName} {ObjectiveName}");
        ScheduleUpdate();
    }

    void HandleCreateObjective(CreateObjectiveModal modal)
    {
        if (modal.Name != null && modal.Name != "" && modal.Category != null && modal.Category != "")
        {
            CreateObjective = null;
            Task.Run(async () =>
            {
                using var scope = ScopeFactory.CreateScope();
                var db = scope.ServiceProvider.GetRequiredService<IChallengePadDb>();
                await db.CreateObjective(modal.Name, modal.Category, modal.Points, modal.OperationId, CancellationToken.None);
            });
        }
    }

    async Task HandleObjectiveSolvedChanged(Objective obj)
    {
        using var scope = ScopeFactory.CreateScope();
        var db = scope.ServiceProvider.GetRequiredService<IChallengePadDb>();
        await db.UpdateObjective(obj.Id, obj.OperationId, obj.Solved, CancelSource.Token);
    }

    async Task ToggleObjectiveVisibility(Objective obj)
    {
        using var scope = ScopeFactory.CreateScope();
        obj.Visible = !obj.Visible;
        var db = scope.ServiceProvider.GetRequiredService<IChallengePadDb>();
        await db.UpdateObjectiveVisiblity(obj.Id, obj.OperationId, obj.Visible, CancelSource.Token);
    }

    void ToggleHidden()
    {
        ShowHidden = !ShowHidden;
    }

    void ScheduleUpdate()
    {
        Task.Run(async () =>
        {
            if (OperationName != null)
            {
                using var scope = ScopeFactory.CreateScope();
                var db = scope.ServiceProvider.GetRequiredService<IChallengePadDb>();
                var operation = await db.GetOperation(OperationName, CancellationToken.None);
                Objective? objective = operation.Objectives.Where(obj => obj.Name == ObjectiveName).SingleOrDefault();
                await InvokeAsync(() =>
                {
                    Update(operation, objective);
                });
            }
        });
    }

    void Update(Operation? selectedOperation, Objective? selectedObjective)
    {
        Logger.LogWarning($"Update({selectedOperation?.Id}, {selectedObjective?.Id})");
        SelectedOperation = selectedOperation;
        SelectedObjective = selectedObjective;
        if (SelectedObjective != null && ActionName == "files")
        {
            SelectedFileList = SelectedObjective.Files;
        }
        else
        {
            SelectedFileList = null;
        }
        base.StateHasChanged();
    }
}
